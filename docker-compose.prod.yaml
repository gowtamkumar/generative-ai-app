services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: gowtampaul1995@
      POSTGRES_DB: generative_ai_app_db
      TZ: "GMT"
      PGTZ: "GMT"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - main_network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=gowtampaul0@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=gowtampaul1995@
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - main_network

  server1:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: server_app1
    restart: always
    env_file:
      - ./server/.env.production
    environment:
      NODE_ENV: production
      SERVER_NAME: server_app1
      PORT: 4400
    expose:
      - "4400"
    volumes:
      - ./server/public/uploads:/app/public/uploads
    depends_on:
      - postgres
    networks:
      - main_network
  server2:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: server_app2
    restart: always
    env_file:
      - ./server/.env.production
    environment:
      NODE_ENV: production
      SERVER_NAME: server_app2
      PORT: 4300
    expose:
      - "4300"
    volumes:
      - ./server/public/uploads:/app/public/uploads
    depends_on:
      - postgres
    networks:
      - main_network
  server3:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: server_app3
    restart: always
    env_file:
      - ./server/.env.production
    environment:
      NODE_ENV: production
      SERVER_NAME: server_app3
      PORT: 4200
    expose:
      - "4200"
    volumes:
      - ./server/public/uploads:/app/public/uploads
    depends_on:
      - postgres
    networks:
      - main_network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: client_app
    restart: always
    env_file:
      - ./client/.env.production
    environment:
      NODE_ENV: production
    expose:
      - "80"
    depends_on:
      - server1
      - server2
      - server3
    networks:
      - main_network

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./server/public/uploads:/app/public/uploads
      # - ./nginx/certbot/conf:/etc/letsencrypt
      # - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - client
      - server1
      - server2
      - server3
    networks:
      - main_network

  # certbot:
  #   image: certbot/certbot
  #   container_name: inventory_certbot
  #   volumes:
  #     - ./nginx/certbot/conf:/etc/letsencrypt
  #     - ./nginx/certbot/www:/var/www/certbot
  #   # command: >
  #   #   "sleep 10 &&
  #   #    certbot certonly --webroot --webroot-path=/var/www/certbot
  #   #    --email gowtam.semicolonit@gmail.com --agree-tos --no-eff-email
  #   #    -d inventory.semicolonit.com -d www.inventory.semicolonit.com"

networks:
  main_network:
    driver: bridge

volumes:
  postgres_data:
