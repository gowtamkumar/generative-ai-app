  worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    upstream client_app {
        server client_app:80;
    }

    upstream server_app {
        ip_hash;
        server server_app1:4400;
        server server_app2:4300;
        server server_app3:4200;
    }


    server {
        listen 80;
        server_name _; # Replace with your domain

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

           # âœ… NEW: Serve uploaded files (served by NestJS)
        location /uploads/ {
            alias /app/public/uploads/;
            autoindex off;
            access_log off;
            expires max;
        }
        # Serve frontend (React build)
        location / {
            proxy_pass http://client_app;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_intercept_errors off;
        }

        # Forward API requests to the NestJS backend
        location /api/ {
            proxy_pass http://server_app;
            proxy_http_version 1.1;

            proxy_connect_timeout 300;
            proxy_send_timeout 300;
            proxy_read_timeout 300;
            send_timeout 300;

            client_max_body_size 100M;

            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, Authorization, Content-Type, Accept" always;

            if ($request_method = OPTIONS) {
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }

            proxy_set_header Authorization $http_authorization;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            error_log /var/log/nginx/api_error.log debug;
        }
                # Handling 404 errors by serving index.html from React
        error_page 404 /index.html;
       
    }
}
